# Generated by Django 4.1 on 2023-06-03 13:10

import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import web_app.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0001_initial'),
        ('cities_light', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='RegionalAssociationModel',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=128, unique=True)),
                ('name_ru', models.CharField(max_length=128, null=True, unique=True)),
                ('name_en', models.CharField(max_length=128, null=True, unique=True)),
                ('slug', models.SlugField(blank=True, default=None, max_length=128, null=True, unique=True)),
                ('address', models.CharField(max_length=512)),
                ('address_ru', models.CharField(max_length=512, null=True)),
                ('address_en', models.CharField(max_length=512, null=True)),
                ('person', models.CharField(blank=True, max_length=256, null=True)),
                ('person_ru', models.CharField(blank=True, max_length=256, null=True)),
                ('person_en', models.CharField(blank=True, max_length=256, null=True)),
                ('telephone', models.CharField(blank=True, default='', max_length=16)),
                ('web_site', models.CharField(blank=True, default='', max_length=128)),
                ('e_mail', models.EmailField(blank=True, max_length=254, null=True)),
            ],
            options={
                'verbose_name': 'Regional Association',
                'verbose_name_plural': 'Regional Associations',
            },
        ),
        migrations.CreateModel(
            name='TeacherModel',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('first_name', models.CharField(max_length=64)),
                ('first_name_ru', models.CharField(max_length=64, null=True)),
                ('first_name_en', models.CharField(max_length=64, null=True)),
                ('second_name', models.CharField(max_length=64)),
                ('second_name_ru', models.CharField(max_length=64, null=True)),
                ('second_name_en', models.CharField(max_length=64, null=True)),
            ],
            options={
                'verbose_name': 'Teacher',
                'verbose_name_plural': 'Teachers',
            },
        ),
        migrations.CreateModel(
            name='TopicModel',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=128)),
                ('name_ru', models.CharField(max_length=128, null=True)),
                ('name_en', models.CharField(max_length=128, null=True)),
            ],
            options={
                'verbose_name': 'Topic',
                'verbose_name_plural': 'Topics',
            },
        ),
        migrations.CreateModel(
            name='Topic_Module',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('module', models.CharField(blank=True, max_length=64, null=True)),
                ('module_ru', models.CharField(blank=True, max_length=64, null=True)),
                ('module_en', models.CharField(blank=True, max_length=64, null=True)),
                ('topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='modules', to='web_app.topicmodel')),
            ],
        ),
        migrations.CreateModel(
            name='EventModel',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('city', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='cities_light.city')),
                ('country', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='cities_light.country')),
                ('teachers', models.ManyToManyField(related_name='events', to='web_app.teachermodel')),
                ('topic_modules', models.ManyToManyField(to='web_app.topic_module')),
            ],
            options={
                'verbose_name': 'Event',
                'verbose_name_plural': 'Events',
            },
        ),
        migrations.CreateModel(
            name='RolfUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits, @/./+/-/_  and space only.', max_length=150, unique=True, validators=[web_app.validators.UnicodeSpaceUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(blank=True, max_length=254, unique=True, verbose_name='email address')),
                ('confirmation_key', models.CharField(max_length=64)),
                ('confirmation_key_time', models.DateTimeField(null=True, verbose_name='Token created at')),
                ('is_active', models.BooleanField(default=False, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
